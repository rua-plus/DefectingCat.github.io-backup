{"pageProps":{"postData":{"id":"write-and-cooperation","content":"\n出于对速度无理的追求，最终还是放弃了使用动态内容。转战静态blog。以前也稍微尝试过hexo，所以决定还是主要为hexo为主了。\n\n在之前试过的typecho、wordpress之中，越是臃肿复杂的程序，1M的带宽越是不够。再详细的折腾了hexo之后，发现了最佳的解决方案。\n\n在早期的一些常识之后，我也学会了很多。在刚入坑hexo的时候是盯上了阿里云的ECS+OSS和CDN的。虽然部署还是比较麻烦，但起码已经有了一套比较完善的流程了。\n\n## 从前的写作流程✍\n\nTypora + OneDrive + VScode\n\n以前买过软软的365，于是就用Onedrive来同步写的东西了。Onedrive对windows用起来还好，虽然有时会出些莫名其的问题，但基本上的备份与同步都是正常的。\n\n但对于这套流程的问题不只是Onedrive它卡，这三个软件的契合度并不是很高。写一段代码要切到VScode，写完了再切回来复制到Typora。Onedrive在后台的实时同步还占用一定的性能。\n\n相比较而下，我的部署流程就更为复杂了。因为我的Markdown文件都是放在Onedrive里的，而Hxeo因为`node_modules`的原因并不在Onedrive里，我需要写完了之后再将图片和MD放到Hexo的目录。之后再手动执行生成文章的命令。随后再将生成好的文章手动上传到ECS里挂载的OSS目录。\n\n为什么要通过ECS再传到OSS呢？因为ECS和OSS再同一个区域是不会产生流量费用的。😅\n\nHexo --> ECS --> OSS\n\n## 现在的流程\n\nVScode + git\n\n将步骤的简化带来的不只是效率，从之前的两个编辑器来回切换到现在的只需要一个编辑器，在文字多的情况下也能保证一定的性能。此外，整体流程的步骤也更加契合，写完了之后可以直接在VScode里打开Terminal进行push。\n\n配上CI持续集成，只需要写完push，之后就可以等着全新的文章上线。\n\nHexo --> CI --> COS\n\nHexo的仓库直接push，之后CI持续集成就会按照预设好的步骤来进行部署，除了可以部署到几个仓库的Pages外，还可以直接部署到云存储。\n\n### VS Code - 不只是代码\n\n软软的Visual Studio Code是一款很棒的编辑器。很早之前我就用它来尝试写一些东西，但只是用作于编辑器，主要功能就是代码补全和着色。\n\n在早期的时候我比较喜欢用Typora来写作，它的风格我很喜欢，还能换主题，整体看上去很漂亮。但最近发现了一些比较难以容忍的毛病；就是当它的一篇文章字符超过10K的时候，性能略差一点的电脑就会很卡，打字都不出来的那种。我猜想可能和它是electron写的有关系。\n\n就在我还没放弃它的时候，我无意中找到了VScode的Markdown插件。反正装插件也不是很麻烦是事情，于是就是尝试了一下。\n\n没想到一时间我便爱上了它，虽然整体界面没有以前那么整洁、那么清新脱俗。但整体给人给感觉没有非常杂乱，反而看上去倒有点像剪辑软件？\n\n除了外观从清新脱俗到繁重了一点，余下就只剩方便了。对于我这种才转到hexo的写作半吊子，一直很想找个与hexo契合度高的写作姿势。之前需要在Typora中写完，然后再将文章和单独的图片文件夹复制到hexo的`souce/_post`目录。像我这种半年产出一篇文章的还好，要是天天写，那样会被麻烦死。况且，如果有某一篇文章出了点小差错需要改。那就要同时动两个md文件和两组图片文件夹，对着资源管理翻来覆去的找，极为麻烦！🌚\n\n![vscode](../images/写作与协作/vscode.webp)\n\n#### 粘贴图片🖼\n\n之前在使用Typora写作的时候，最为方便的莫非是粘贴图片了。目前Windows上的Typora也支持将粘贴的图片复制到指定的路径或者是云存储。我的图片存放路径都是相对于文章的目录下的`images`目录：\n\n```bash\n../images/postName/\n```\n\nTypora可以设置将图片复制到指定文件夹，还能创建文件夹。不过好在在VScode里也有插件能够实现同样的操作。使得插图剩下了一大笔麻烦的操作。\n\n我用的是开源的[Paste Images](https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image)。\n\n只需要将插件稍微改下设置，将path修改下就能达到想要的效果。\n\n```bash\n../images/${currentFileNameWithoutExt}/\n```\n\n#### 一些小设置\n\n**Quick Suggestions**\n\nEditor > Suggest: Snippets Prevent Quick Suggestions\n\n在代码段中依然显示建议。\n\n**自定义Suggestions**\n\n```js\n{\n\t// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and \n\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\n\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \n\t// same ids are connected.\n\t// Example:\n\t\"Print to console\": {\n\t\t\"prefix\": \"cl\",\n\t\t\"body\": [\n\t\t\t\"console.log($1);\",\n\t\t],\n\t\t\"description\": \"Log output to console\"\n\t}\n}\n```\n\n### Coding - 持续构建⏰\n\n之前最大的问题还是手动部署hexo的繁琐操作，每新增一篇文章都是几个重复的机械性操作。对于我这种半年才写一篇文章的咸鱼来说都感觉到烦了。\n\n使用CI持续部署的好处就是，可以完全专心与创作，而不用再去管部署之类的问题。只需要第一次写好流程，剩下的就全部交给自动化吧。\n\n![coding](../images/写作与协作/2020-08-07-09-30-54.webp)\n\n之前的我从来没有用过Coding，对CI/CD也没有什么了解，从来没考虑过自动化部署这类操作。后来在研究静态化网站时发现了新大陆，完全可以将复杂重复的工作交给机器。并且随着后面文章的增加，渲染markdown文件肯定会越来越慢，于其手动繁琐的操作，不如完全交给CI。\n\n### Github Action\n\n在我研究CI姿势的这段时间里，Github也推出了自己的CI（钞能力）。无论是谁家的CI，除了部署步骤不一样，其结果肯定是相同的。Github action也是能达到同样的效果，对于各个厂家的云存储，action也有同样的解决方法，甚至是比coding的jenkins还要灵活一点。\n\n![](../images/写作与协作/2020-08-27-16-32-48.webp)\n\n## Hexo插件📥\n\n### 压缩\n\n我用的是[Hexo-all-minifier](https://github.com/chenzhutian/hexo-all-minifier)，可以静态文件以及图片。还可以分别设置压缩等级来权衡质量与大小。\n\n```bash\nnpm install hexo-all-minifier --save\n``` \n\n不过它使用到了已经编译好的二进制包gifsicle等，在安装时需要走个脚本编译一下，在网络不好的情况下大概率会安装失败。为此我还特地水过一次：[Can't install gifsicle](https://www.defectink.com/defect/cant-install-gifsicle.html)\n\nHexo-all-minifier用到的也是gulp和一些图片压缩的工具，相对于gulp来说，它的配置更简单，更适合像我这种比较懒的咸鱼。\n\n只需要在站点配置文件添加一段聚合好的配置文件就好了，像这样：\n\n```yml\n# minifier\nall_minifier: ture\n\nhtml_minifier:\n  enable: true\n  ignore_error: false\n  silent: false\n  exclude:\n\ncss_minifier:\n  enable: true\n  silent: false\n  exclude: \n    - '*.min.css'\n\njs_minifier:\n  enable: true\n  mangle: true\n  silent: false\n  output:\n  compress:\n  exclude: \n    - '*.min.js'\n\nimage_minifier:\n  enable: true\n  interlaced: false\n  multipass: false\n  optimizationLevel: 2\n  webpquant: false\n  progressive: false\n  silent: false\n```\n\n### Sitemap与RSS\n\n两个小功能吧，虽然也不会有人来订阅我的小破站🤣。\n\n```bash\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-feed --save\n```\n\n和压缩插件一样，都是在站点的`_config.yml`里添上相应的配置文件就好了。\n\n```yml\n# feed\nfeed:\n  type:\n    - atom\n    - rss2\n  path:\n    - /xml/atom.xml\n    - /xml/rss.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date\n  icon: icon.webp\n  autodiscovery: true\n  template:\n\n# sitemap\nsitemap:\n  path: /xml/sitemap.xml\n  template: ./source/_data/sitemap_template.xml\n  rel: false\n  tags: true\n  categories: true\n```\n\n另外，可以来试一下：\n\n* [Atom](/xml/atom.xml)\n* [RSS](/xml/rss.xml)\n* [Sitemap](/xml/sitemap.xml)\n\n## Git加速\n\n使用Linux主机或者在Windows中使用git bash时，修改（新建）在用户目录下的`~/.ssh/config`文件，新加如下内容。\n\n```bash\nhost github.com\nHostName github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nProxyCommand connect -S 127.0.0.1:1080 %h %p\n```\n\nmacos的connect可以用brew安装，而windows的git bash中已有：\n\n```bash\nbrew install connect\n```\n\n对于Ubuntu：\n\n```bash\napt-get install connect-proxy\n```\n\n某些发行版可能没有connect软件包，这个地址下载源码编译一下就好了。\n\n```\nhttps://bitbucket.org/gotoh/connect/src/default/\n```\n\n对于http：\n\n```bash\ngit config --global http.proxy \"socks5://127.0.0.1:1080\"\ngit config --global https.proxy \"socks5://127.0.0.1:1080\"\n```\n\nnode的淘宝源\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\n```\n\n```bash\nnpm config set registry https://registry.npmjs.org\n```\n\n## 早期计划\n\n### 内容分发网络\n\n之前就有在使用cdn来加速图片的访问，效果也还是不错的。但是整体blog的内容还都是有1M服务器上的php生成的。所以就算异地图片加载速度再快，终端也需要连接到身在华南的服务器。无论是人多还是人少，速度总是不理想。\n\n最后打算使用纯静态的blog，直接部署到cdn上，速度肯定是无可比拟的。但是还是有一点弊端的，例如cdn节点可能更新不及时等问题。\n\n### 解决方案\n\n正好手头有个1M出口的ECS，嫌它太慢。而它的真正作用在于和阿里云的oss进行通信，因为走的是阿里云的内网，所以通过ECS上传文件到oss是不需要收流量费用的。而ECS仅仅只是出口1M而已，入口是不限速的。如果需要最大化节约的上传文件到oss，可以通过ECS传。\n\n阿里云的oss在linux上有个可以连接oss的软件，但是那个操作并不是我想需要的。好在阿里云还有一款[ossfs](https://help.aliyun.com/document_detail/32196.html?spm=a2c4g.11186623.6.749.72b73adfsKCqTT)软件。它可以将对象存储OSS的存储空间（Bucket）挂载到本地文件系统中，能够像操作本地文件一样操作OSS的对象（Object），实现数据的共享。\n\n这对于写静态blog来说实在是太方便了，只需要将Bucket挂载到本地文件夹，就像挂载磁盘那样操作。随后就可以不用流量的将静态文件上传到oss。\n\n开启OSS的静态网站托管，将hexo生成的静态blog都放到挂载的目录下即可。非常的方便，文章内的图片也可以使用相对路径，而不需要一张一张的插入外链那么麻烦了。\n\n需要注意一点的是：使用OSS默认域名访问时，Response Header中会自动加上` Content-Disposition:'attachment=filename;'`。即从浏览器访问网页类型文件时，不会显示文件内容，而是以附件形式进行下载。也就是说需要绑定自己的域名才能静态托管。\n\n### 多重备份\n\n这种方案解决的好处就是，可以在多个地方实现多重的数据备份。且不需要在备份数据库了。\n\n* Github一份备份\n* CDN一份备份\n* ECS一份备份\n* 自己的电脑还可以有多份备份\n\n一步直接实现异地多备份。\n\n### OSSFS\n\n目前有多个发行版的安装包：\n\n| Linux发行版        | 下载  |\n| :----------------- |   :------ |\n| Ubuntu 18.04 (x64) | [ossfs_1.80.6_ubuntu18.04_amd64.deb](http://gosspublic.alicdn.com/ossfs/ossfs_1.80.6_ubuntu18.04_amd64.deb) |\n| Ubuntu 16.04 (x64) | [ossfs_1.80.6_ubuntu16.04_amd64.deb](http://gosspublic.alicdn.com/ossfs/ossfs_1.80.6_ubuntu16.04_amd64.deb) |\n| Ubuntu 14.04 (x64) | [ossfs_1.80.6_ubuntu14.04_amd64.deb](http://gosspublic.alicdn.com/ossfs/ossfs_1.80.6_ubuntu14.04_amd64.deb) |\n| CentOS 7.0 (x64)   | [ossfs_1.80.6_centos7.0_x86_64.rpm](http://gosspublic.alicdn.com/ossfs/ossfs_1.80.6_centos7.0_x86_64.rpm) |\n| CentOS 6.5 (x64)   | [ossfs_1.80.6_centos6.5_x86_64.rpm](http://gosspublic.alicdn.com/ossfs/ossfs_1.80.6_centos6.5_x86_64.rpm) |\n\n下载到主机内后，根据不同的发行版进行安装就好了。而对于Ubuntu需要使用gdebi：\n\n```bash\nsudo apt-get update\nsudo apt-get install gdebi-core\nsudo gdebi your_ossfs_package\n```\n\n#### 配置账号信息\n\n成功了安装了之后就可以配置oss的账号信息来登陆。使用AccessKeyId/AccessKeySecret来代替账号密码进行访问。如果担心安全问题还可以使用阿里云的子账号只赋予oss的访问权限，来最大程度的保护账户资产。在阿里云的[RAM访问控制](https://ram.console.aliyun.com/overview)中可以进行添加子账户并赋予特定的权限。\n\n![image-20200229104812836](../images/写作与协作/image-20200229104812836.webp)\n\nAccessKeyId/AccessKeySecret信息存放在`/etc/passwd-ossfs`文件中。并且文件的权限必须正确设置，建议设为640。\n\n格式为：`bucket名:AccessKeyId:AccessKeySecret`\n\n```bash\necho my-bucket:my-access-key-id:my-access-key-secret > /etc/passwd-ossfs\nchmod 640 /etc/passwd-ossfs\n```\n\n如果需要配置多个账号或者多个bucket，可以直接将账号信息写在后面，ossfs会根据挂载的存储空间名称匹配到正确的账号上。\n\n```bash\necho my-second-bucket:my-access-key-id:my-access-key-secret >> /etc/passwd-ossfs\n```\n\n#### 挂载到指定目录\n\n账号信息填写的非常简单，写到指定文件里就可以了。填完之后就可以将oss挂载到本地的指定目录上。\n\n格式为：`ossfs bucket名 本地挂载点 -ourl=oss url`\n\n```\nossfs my-bucket my-mount-point -ourl=my-oss-endpoint\n```\n\n如果正好使用的是阿里云的ECS机器，可以走oss的内网，在上传文件时就不会产生多余的流量费用。通常oss的内网域名包含internal。例如：\n\n```\noss-cn-beijing-internal.aliyuncs.com\n```\n\n只需要将近4条左右的命令就可以将oss成功挂载到本地上，就如同一个文件夹。\n\n#### 开机自动挂载\n\n和开机自动挂载分区一样，Ubuntu需要在`/etc/fstab`中进行操作。\n\n```bash\nossfs#bucket_name mount_point fuse _netdev,url=url,allow_other 0 0\n```\n\n对应的填入了信息之后，可以使用`mount -a`进行测试。如果没有任何报错，即代表成功。\n\n### 阿里云子目录\n\n阿里云oss的默认配置是不会去访问子目录下的首页的，子目录下的`index.html`必须访问全部的静态链接。否则会跳转回主页的`index.html`。\n\n网上的大多数解决办法就是修改hexo的配置，把所有的子目录的绝对路径都生成出来。这是一种解决办法，但不能从根源上解决所有问题。\n\n并且阿里云也早就支持了子目录首页了。只需要简单开一下就能解决这个问题。\n\n![image-20200401100940056](../images/写作与协作/image-20200401100940056.webp)\n\n","desc":"出于对速度无理的追求，最终还是放弃了使用动态内容。转战静态blog。以前也稍微尝试过hexo，所以决定还是主要为hexo为主了。\n\n在之前试过的typecho、wordpress之中，越是臃肿复杂的程...","title":"写作与协作","date":"2020-06-29T12:12:41.000Z","tags":"Tools","categories":"实践","url":"write-and-cooperation","index_img":"/images/写作与协作/index.webp"}},"__N_SSG":true}