{"pageProps":{"postData":{"id":"javascript-proxy-and-reflect","content":"\nECMAScript 6 新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。\n\n## 反射 API\n\n在研究代理之前，应该先看下反射。与 Math 类似，Reflect 对象不是类，尽管他们都是大写开头的。它的属性只是定义了一组相关的方法。这些 ES6 添加的函数为“反射”对象及其属性定义了一套 API。\n\nReflect 对象在同一个命名空间里定义了一组边界函数，这些函数可以模拟核心语言语法的行为，复制各种既有对象功能的特性。这组 Reflect 函数一一对应后续的 Proxy 处理器方法。 这些方法基本上都对应了语言的常规语法，利用在 Proxy 处理器上，可以提供更好的嵌入行为的能力。\n\n反射 API 所包含的方法可以在 MDN 所查询到：[Reflect - JavaScript | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect)\n\n## 代理\n\n代理对象是目标对象的抽象。利用代理对象，可以修改 JavaScript 对象的基础行为。上述所介绍的反射 API 可以直接对 JavaScript 对象持续基础操作，而 Proxy 则提供了另一种途径，只要在代理上调用，所有捕获器都会拦截他们对应的反射 API 操作。使得我们能创建普通对象无法企及能力的代理对象。\n\nProxy 是一个类，创建一个代理对象通过 Proxy 类来构造。同时它还接收两个必须的参数，即目标对象`target`与处理对象`handler`。缺少任何一个参数都会抛出 TypeError。\n\n```js\nconst proxyObj = new Proxy(target, handler);\n```\n\n### 无操作转发代理\n\n无操作转发代理，也就是最简单的空代理，即除了作为一个抽象的目标对象，什么也不做。默认情况下，在代理对象上执行的所有操作都会无障碍地传播到目标对象。\n\n要创建空代理，可传入一个简单的空对象作为处理器对象，从而让所有操作都畅通无阻地抵达目标对象。\n\n```js\nconst obj = {\n  name: 'xfy',\n};\n\nconst proxyObj = new Proxy(obj, {});\n\nproxyObj.name\n// \"xfy\"\nproxyObj.name = '123'\n// \"123\"\nobj\n// {name: \"123\"}\n```\n\n### 捕获与反射 API\n\n代理的主要目的是定义**捕获器**（trap）。捕获器就是在处理器对象中定义的“基本操作的拦截器”。每个处理器都可以包含零个或多个捕获器，每个捕获器都对应一种基本操作，可以直接或间接在代理对象上调用。每次在代理对象上调用这些基本操作时，代理可以在这些操作转发到目标对象前先调用捕获器函数，从而拦截并修改相应的行为。\n\n例如，可以定义一个`get()`捕获器，在 ECMAScript 操作`[[Get]]`算法时触发：\n\n```js\nconst obj = {\n  name: 'xfy',\n};\n\nconst handler = {\n  get(target, property, receiver) {\n    return [target, property, receiver];\n  },\n};\n\nconst proxyObj = new Proxy(obj, handler);\n\nproxyObj.name // [{…}, \"name\", Proxy]\n```\n\n这里的`get()`捕获器看上去和属性访问器很类似，事实上对应的`set()`操作也很类似。但他们并不是属性访问器，最简单的判断就是属性访问器对象的`get/set()`操作需要一个属性名称，而代理对象的捕获器会拦截所有对应的操作，并通过参数的形式访问名称、属性等。\n\n这是不是看上去和反射 API 有点相似？没错，反射 API 就是这种用法：\n\n```js\n// Object\nvar obj = { x: 1, y: 2 };\nReflect.get(obj, \"x\"); // 1\n```\n\n事实上，捕获器和反射 API 提供的方法一一对应。这些方法与捕获器拦截的方法具有相同的名称和函数签名，而且也具有被拦截方法相同的行为。\n\n也就是说可以这样创建一个空代理对象：\n\n```js\nconst obj = {\n  name: 'xfy',\n};\n\nconst handler = {\n  get(target, property, receiver) {\n    return Reflect.get(...arguments);\n  },\n};\n\nconst proxyObj = new Proxy(obj, handler);\n```\n\n甚至更直接一点\n\n```js\nconst handler = {\n  get: Reflect.get,\n};\n```\n\n所有捕获器都可以基于自己的参数重建原始操作，但并非所有捕获器都像`get()`操作一样简单。所以，通过手写所有捕获器来如法炮制的想法是不现实的。好在，反射 API 为我们提供了便捷，我们不需要手动重建原始行为，而是可以通过调用全局 Reflect 对象上同名的方法来轻松创建。\n\n```js\nconst obj = {\n  name: 'xfy',\n};\n\nconst handler = {\n  get(target, property, receiver) {\n    let decoration = '';\n    property === 'name' ? (decoration = '! yyds!') : void 0;\n    return Reflect.get(...arguments) + decoration;\n  },\n};\n\nconst proxyObj = new Proxy(obj, handler);\n```\n\n### 捕获不变式\n\n虽然使用捕获器几乎可以改变所有基本方法的行为，但也不是没有限制。根据 ECMAScript 规范，每个捕获的方法都知道目标对象上下文、捕获函数签名，而捕获器的行为必须遵循“捕获器不变式”（trap invariant）。捕获器不变式因方法不同而异，但通常都会防止捕获器定义出现过于反常的行为。\n\n例如，目标对象有一个不可写且不可配置的属性，那么捕获器在返回一个与该属性不同的值，会抛出 TypeError。\n\n```js\nconst target = {};\n\nObject.defineProperty(target, 'foo', {\n  configurable: false,\n  writable: false,\n  value: 'bar',\n});\n\nconst handler = {\n  get() {\n    return 'bazzz';\n  },\n};\n\nconst proxyObj = new Proxy(target, handler);\n```\n\n### 可撤销代理\n\n使用 new 关键字创建的普通代理对象与目标对象之间会在声明周期内一直存在联系。Proxy 暴露了`revocable()`静态方法，使其可以撤销代理对象与目标对象的关联。\n\n```js\nconst target = {\n  foo: 'bar',\n};\n\nconst handler = {\n  get(target, property, recevier) {\n    let decoration = '';\n    property === 'foo' ? (decoration = '!!!') : void 0;\n    return Reflect.get(...arguments) + decoration;\n  },\n};\n\nconst { proxy, revoke } = Proxy.revocable(target, handler);\n\nconsole.log(proxy.foo);\nconsole.log(target.foo);\n\nrevoke();\n\nconsole.log(proxy.foo);\n```\n\n### 代理另一个代理\n\n代理允许多层嵌套，可以创建一个代理，通过它去代理另一个代理。这样就可以在目标对象之上构建多层拦截网络。\n\n```js\nconst target = {\n  foo: 'bar',\n};\n\nconst firstProxy = new Proxy(target, {\n  get() {\n    return Reflect.get(...arguments) + 'first proxy!';\n  },\n});\n\nconst secondProxy = new Proxy(firstProxy, {\n  get() {\n    return Reflect.get(...arguments) + 'second proxy!';\n  },\n});\n\nconsole.log(firstProxy.foo);\nconsole.log(secondProxy.foo);\n```\n\n### 代理的问题与不足\n\n代理是在 ECMAScript 现有基础上构建起来的一套新 API，因此其实已经尽力做到最好了。很大程度上，代理作为对象的虚拟层可以正常使用。但在某些情况下，代理也不能与现在的 ECMAScript 机制很好的协同。\n\n#### 代理中的 this\n\n方法中的 this 通常指向调用这个方法的对象：\n\n```js\nconst target = {\n  showThis() {\n    console.log(this);\n    console.log(this.foo);\n    console.log(this === proxy);\n  },\n  foo: 'bar',\n};\n\nconst proxy = new Proxy(target, {});\n\nproxy.showThis()\n// Proxy {foo: \"bar\", showThis: ƒ}\n// bar\n// true\n```\n\n在代理中亦是如此，符合预期行为。\n\n#### 代理与内部槽位\n\n","desc":"ECMAScript 6 新增的代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。\n\n反射 API\n\n在研究代理之前，应该先看下反射。与 Math 类似，Reflect 对象不是类，尽管他们...","title":"JavaScript-代理与反射","date":"2021-07-12T11:42:03.000Z","tags":"JavaScript","categories":"笔记","url":"javascript-proxy-and-reflect"}},"__N_SSG":true}