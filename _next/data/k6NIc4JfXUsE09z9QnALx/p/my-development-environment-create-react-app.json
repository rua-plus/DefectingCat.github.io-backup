{"pageProps":{"postData":{"id":"my-development-environment-create-react-app","content":"\n## 创建项目\n\nCreate React App 自带 TypeScript 的 template，所以直接创建即可。\n\n```bash\nnpx create-react-app my-app --template typescript\n```\n\n或者\n\n```bash\nyarn create react-app my-app --template typescript\n```\n\n## Absolute imports\n\n绝对路径引入有点类似于 webpack 的别名，不过这种方式是使用 TypeScript 的编译器来实现的。只需要在 `tsconfig.json`（如果是纯 JavaScript 的话，也可以使用 `jsconfig.json`）中添加 `baseUrl` 字段。\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src\"\n  },\n  \"include\": [\"src\"]\n}\n```\n\n就可以实现将这样的导入：\n\n```tsx\nimport useApi from './../../hooks/use-api';\nimport Date from './../../components/date';\nimport Image from './../../components/image';\nimport transfromUserData from './../../helpers/transform-user-data';\n```\n\n变成这样：\n\n```tsx\nimport useApi from 'hooks/use-api';\nimport Date from 'components/date';\nimport Image from 'components/image';\nimport transfromUserData from 'helpers/transform-user-data';\n```\n\n这不仅仅是看上去更加整洁了，由于是绝对路径，将对应的导入复制到其他组件中也可以正常使用。不用再老数点点了。\n\n## Test coverage\n\n默认的测试脚本是交互式的，虽然非常只能，但有些时候我也需要在 CI 中测试，并收集覆盖率报告。\n\n```json\n\"test:coverage\": \"CI=true yarn test --env=jsdom --coverage\",\n```\n\n## VScode Debug\n\n添加对应的 VScode 配置文件到 `.vscode/launch.json`\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Chrome\",\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"url\": \"http://localhost:3000\",\n      \"webRoot\": \"${workspaceFolder}/src\",\n      \"sourceMapPathOverrides\": {\n        \"webpack:///src/*\": \"${webRoot}/*\"\n      }\n    }\n  ]\n}\n```\n\n## ESLint + Prettier\n\ncreate-react-app 其实是为我们安装过了 ESLint，所以我们不需要再手动的安装了。\n\n```bash\nyarn add -D @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-airbnb-typescript eslint-plugin-jest\n```\n\n对于 Airbnb config 可以使用这个包。\n\n```bash\nnpx install-peerdeps --dev eslint-config-airbnb\n```\n\nPrettier 则需要我们手动去的去安装了。\n\n```bash\nyarn add -D prettier eslint-config-prettier eslint-plugin-prettier\n```\n\n接下来就是配置文件\n\n```js\n// .eslintrc.js\nmodule.exports = {\n  extends: [\n    'airbnb-typescript',\n    'airbnb/hooks',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:jest/recommended',\n    'plugin:prettier/recommended',\n  ],\n  plugins: ['react', '@typescript-eslint', 'jest', 'import'],\n  env: {\n    browser: true,\n    es6: true,\n    jest: true,\n  },\n  globals: {\n    Atomics: 'readonly',\n    SharedArrayBuffer: 'readonly',\n  },\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    ecmaFeatures: {\n      jsx: true,\n    },\n    ecmaVersion: 2018,\n    sourceType: 'module',\n    project: './tsconfig.json',\n  },\n  rules: {\n    'linebreak-style': 'off',\n    'prettier/prettier': [\n      'warn',\n      {\n        endOfLine: 'auto',\n      },\n    ],\n  },\n};\n```\n\n我的 Prettier 的配置文件比较简单，只需要单引号与分号就好了。\n\n```json\n// .prettierrc.sjon\n{\n  \"semi\": true,\n  \"singleQuote\": true\n}\n```\n\n如果需要的话，还可以再加两个脚本。\n\n```json\n\"scripts\": {\n  \"format\": \"prettier --write src/**/*.ts{,x}\",\n  \"lint\": \"tsc --noEmit && eslint src/**/*.ts{,x}\"\n}\n```\n","desc":"创建项目\n\nCreate React App 自带 TypeScript 的 template，所以直接创建即可。\n\n\n\n或者\n\n\n\nAbsolute imports\n\n绝对路径引入有点类似于 web...","title":"我的开发环境-create-react-app","date":"2021-12-30T03:12:29.000Z","tags":"React","categories":"笔记","url":"my-development-environment-create-react-app","index_img":"/images/我的开发环境-create-react-app/logo.svg"}},"__N_SSG":true}