{"pageProps":{"postData":{"id":"javascript-notes-reference-type","content":"\n> 这是来自Professional JavaScript for Web Develops第五章的笔记。\n\n![javascript](../images/JavaScript笔记-引用类型/javascript.webp)\n\n## 基本类型和引用类型\n\n基本类型值指的是简单的数据段。\n\n引用类型值指那些可能由多个值构成的对象。\n\nJS的五种基本数据类型就是基本类型值。这五种基本数据类型是按值访问的，因为可以操作保存在变量中的实际的值。\n\n引用类型的值是保存在内存中的对象。js不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在复制保存着对象的某个变量时，操作的是变量的引用。但为变量添加属性时，操作的是实际的对象。\n\n传递参数只有按值传递，没有按引用传递：\n\n```js\nlet person = {};\nundefined\nfunction setName(ojb) {\nojb.name = 'xfy';\n}\nundefined\nsetName(person);\nundefined\nperson.name;\n\"xfy\"\n```\n\n当在函数内，将ojb2重新声明为一个新的对象。如果参数是按引用传递的，person对象应该自动修改name属性值指向`'notxfy'`。\n\n```js\nfunction setName2(ojb2) {\nojb2.name = 'xfy2';\nojb2 = {};\nojb2.name = 'notxfy';\n}\nundefined\nsetName2(person);\nundefined\nperson.name\n\"xfy2\"\n```\n\njs引用类型的值（对象）是引用类型的一个实例。引用类型是一种数据结构，用于将数据和功能组织在一起。虽然引用类型和类看起来类似，但是它们不是相同的概念。\n\n对象是某个特定引用类型的实例。\n\n## Object类型\n\nObject是目前ECMAScript中使用最多的一个语言。虽然Object实例不具备多少功能，对对于在应用程序中存储和传输数据而言，它们确实是非常理想的选择。\n\n### 创建Object实例\n\n创建方式有两种。第一种是new操作符后接Object构造函数。构造函数本身就是一个函数，只不过它时出于创建新对象的目的而定义的。\n\n```js\nlet person = new Object();\nperson.name = \"Defectink\";\nperson.age = 8;\n```\n\n另外一种是使用对象字面量：\n\n```js\nlet person2 = {\n    name = \"xfy\",\n    age = 88\n}\n```\n\n左边的花括号表示对象字面量的开始，因为它出现在表达式上下文（expression context）中。同样的花括号如果出现在一个语句上下文（statement context）中，则表示一个语句块的开始。例如if语句的花括号。\n\n在对象字面量中使用逗号来分隔不同的属性。最后一个属性不添加逗号。\n\n在使用对象字面量语法时，属性名也可以使用字符串。\n\n对象字面量还有另外一种写法：\n\n```js\nlet person3 = {};\nperson3.name = 'xxx';\nperson3.age = 3;\n```\n\n#### 传递大量参数\n\n对象字面量也是想函数传递大量可选参数的首选方式。\n\n```js\nlet output = \"\";\nfunction showInfo(args){\n    if (typeof args.name == \"string\"){\n        output += \"the Name: \" + args.name + \"\\n\";\n    }\n    if (typeof args.age == \"number\"){\n        output += \"the Age: \" + args.age + \"\\n\";\n    }\n    alert(output);\n}\nshowInfo({\n    name:\"test\",\n    age: 128\n})\n```\n\n函数showInfo()接收一个名为args的参数。这个参数可能带有名为name或age的属性，又或者这两个属性都有或没有。每次都可以使用一个对象字面量来传递不同的可选数据。\n\n通常访问对象属性都是用点表示法。在js中也可以使用方括号表示法来访问对象的属性。\n\n```js\nconsole.log(personn.name);\nconsole.log(person[\"name\"]);\n```\n\n这两种方法没有任何区别。但方括号的优点时可以通过变量来访问属性。\n\n```js\nlet personAnotherName = 'test';\nconsole.log(person[personAnotherName]);\n```\n\n## Array类型\n\njs的数组是数据的有序列表。数组的每一项都都可以用来保存任何类型的数据。数组的大小也是可以动态调整的，即可以随着数据的添加自动增长以容纳新数据。\n\n### 创建数组\n\n使用Array构造函数：\n\n```js\nlet colors = new Array();\n```\n\nArray构造函数可以传递数组的数量，创建十个数组：\n\n```js\nlet colors = new Array(10);\n```\n\n传递的参数还能用于创建数组的内容，但是不能创建纯数字的内容：\n\n```js\n        let colors = new Array(3);      //create an array with three items\n        let names = new Array(\"Greg\");  //create an array with one item, the string \"Greg\"\n```\n\n可以省略new操作符：\n\n```js\n        let colors = Array(3);      \n        let names = Array(\"Greg\");\n```\n\n使用字面量表示法：\n\n```js\n        let colors = [\"red\", \"blue\", \"green\"]; //creates an array with three strings\n        let names = [];                        //creates an empty array\n        let values = [1,2,];                   //AVOID! Creates an array with 2 or 3 items\n        let options = [,,,,,];                 //AVOID! creates an array with 5 or 6 items\n```\n\n### 读取数组\n\n使用方括号并提供相应值的基于0的数字索引：\n\n```js\nlet colors = ['red','blue','green'];\ncolors[0];\ncolors[2] = 'test';\t\t//修改\ncolors[3] = 'new one';\t\t//新增\n```\n\n数组的项数保存在length属性中，这个属性始终都会返回0或更大的值。\n\n```js\nlet colors = ['red','blue','green'];\ncolors.length;\n3\n```\n\nlength属性不是只读的，可以通过设置这个属性来向数组的末尾添加或移除内容。\n\n```js\n        let colors = [\"red\", \"blue\", \"green\"];    //creates an array with three strings\n        colors.length = 2;\n        alert(colors[2]);        //undefined\n\n        let colors = [\"red\", \"blue\", \"green\"];    //creates an array with three strings\n        colors.length = 4;\n        alert(colors[3]);        //undefined\n```\n\n数组的最后一项索引始终都是length-1，所以可以使用length方便在末尾添加内容。\n\n```js\n        let colors = [\"red\", \"blue\", \"green\"];    //creates an array with three strings\n        colors[colors.length] = \"black\";          //add a color\n        colors[colors.length] = \"brown\";          //add another color\n\n        alert(colors.length);    //5\n        alert(colors[3]);        //black\n        alert(colors[4]);        //brown\n```\n\n> 数组最多可以包含4 294 967 295个项\n\njoin()方法可以重现toString()的输出。定义数组分隔符。如果不给join()方法传入任何值，或者传入undefineed，则使用逗号。\n\n```js\n        let colors = [\"red\", \"green\", \"blue\"];\n        alert(colors.join(\",\"));      //red,green,blue\n        alert(colors.join(\"||\"));     //red||green||blue\n```\n\n### 栈方法\n\n栈是一种可以限制插入和删除项的数据结构。栈是一种LIFO（Last-In-First-Out，后进先出）的数据结构。\n\n栈项中的插入（推入）和移除（弹出）只发生在一个位置——栈的顶部。数组有push()和pop()方法实现了类似栈的行为。\n\npush()将参数逐个添加到数组的末尾，并返回修改后数组的长度。\n\npop()将从数组末尾中移除一项，减少length的值，并返回移除的项。\n\n```js\n        let colors = new Array();                      //create an array\n        let count = colors.push(\"red\", \"green\");       //push two items\n        alert(count);  //2\n        \n        count = colors.push(\"black\");                  //push another item on\n        alert(count);  //3\n        \n        let item = colors.pop();                       //get the last item\n        alert(item);   //\"black\"\n        alert(colors.length);  //2\n```\n\n栈方法可以和其他数组方法连用。\n\n```js\n        let colors = [\"red\", \"blue\"];\n        colors.push(\"brown\");              //add another item\n        colors[3] = \"black\";               //add an item\n        alert(colors.length);  //4\n\n\t\tlet item = colors.pop();\n\t\titem;\t\t//\"black\"\n\t\tcolors;\t\t// [\"red\", \"blue\", \"brown\"]\n```\n\n### 队列方法\n\n队列数据结构的访问顺序是FIFO（First-In-First-Out，先进先出）。数组有shift()方法，它能够移除数组的第一个项，减少length值，并返回该项。它就像和pop()方法相反的操作。\n\n结合shift()和push()方法，可以像队列一样使用数组。\n\n```js\n        let colors = new Array();                      //create an array\n        let count = colors.push(\"red\", \"green\");       //push two items\n        alert(count);  //2\n        \n        count = colors.push(\"black\");                  //push another item on\n        alert(count);  //3\n        \n        let item = colors.shift();                     //get the first item\n        alert(item);   //\"red\"\n        alert(colors.length);  //2\n```\n\n数组还有个unshift()方法，它在数组前端添加添加任意个项，并返回修改后数组的长度。它就像和push()相反的操作。\n\n结合unshift()和pop()方法可以反向模拟队列操作。\n\n```js\n        let colors = new Array();                      //create an array\n        let count = colors.unshift(\"red\", \"green\");    //push two items\n        alert(count);  //2\n        \n        count = colors.unshift(\"black\");               //push another item on\n        alert(count);  //3\n        \n        let item = colors.pop();                     //get the first item\n        alert(item);   //\"green\"\n        alert(colors.length);  //2\n```\n\n### 重排序方法\n\n数组中有两个可以重排序的方法：reverse()和sort()。\n\nreverse()对数组反向排序：\n\n```js\n        let values = [1, 2, 3, 4, 5];\n        values.reverse();\n        alert(values);       //5,4,3,2,1\n```\n\nsort()按升序排列数组——即最小的值位于最前面。sort()会调用每个数组项的toString()转型方法。然后比较得到的字符串。\n\n```js\n        let values = [0, 1, 5, 10, 15];\n        values.sort();\n        alert(values);    //0,1,10,15,5\n```\n\n由于1<5，所有10会被排在5前面。所以sort()可以接受一个比较函数来重新排序。\n\n```js\nfunction compare(v1,v2){\n    if (v1 < v2){\n        return -1;\n    }else if(v1 > v2){\n        return 1;\n    }else{\n        return 0;\n    }\n}\nlet values = [0, 1, 5, 10, 15];\nvalues.sort(compare);\n(5) [0, 1, 5, 10, 15]\n```\n\n> reverse()和sort()返回的是经过排序之后的数组。\n\n对于数值类型或者其valueOf()方法会返回数值类型的对象类型，可以使用一个更简单的比较函数。只要有第二个值减第一个值即可。\n\n```js\nfunction compare2(v1,v2){\n    v2 - v1;\n}\nvalues.sort(compare2);\n(5) [0, 1, 5, 10, 15]\n```\n\n### 操作方法\n\nconcat()基于当前数组中所有项目创建一个新的数组。它会先创建一个数组副本，然后将参数添加到这个副本的末尾，返回新构建的数组。没有传递参数时，它只是返回副本。\n\n```js\n        let colors = [\"red\", \"green\", \"blue\"];\n        let colors2 = colors.concat(\"yellow\", [\"black\", \"brown\"]);\n        \n        alert(colors);     //red,green,blue        \n        alert(colors2);    //red,green,blue,yellow,black,brown\n```\n\n```js\nlet colors = ['red','blue','green'];\nundefined\nlet color2 = ['1','2','3'];\nundefined\ncolor2.concat(colors);\n(6) [\"1\", \"2\", \"3\", \"red\", \"blue\", \"green\"]\n```\n\nslice()基于当前数组中的指定位置创建一个新的数组。它接受两个参数，即起始位置和结束位置（不返回结束位置的项）。当只有 一个参数时，返回直到数组末尾的所有项。\n\n```js\n        let colors = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"];\n        let colors2 = colors.slice(1);\n        let colors3 = colors.slice(1,4);\n        \n        alert(colors2);   //green,blue,yellow,purple\n        alert(colors3);   //green,blue,yellow\n```\n\nsplice()是功能更全面的数组操作方法。\n\n* 删除：可以删除任意数量的项，指定两个参数：要删除的第一项位置和要删除的项数。`splice(0,2)`\n* 插入：可以向指定位置插入任意数量的项。指定三个参数：起始位置、0（要删除的项数）和需要插入的项。`splice(2,0,'red','green')`\n* 替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项。指定三个参数：起始位置、要删除的项数和要插入的项。`splice(2,1,'red','blcak')`\n\n插入和删除都在起始位开始。\n\n```js\n        let colors = [\"red\", \"green\", \"blue\"];\n        let removed = colors.splice(0,1);              //remove the first item\n        alert(colors);     //green,blue\n        alert(removed);    //red - one item array\n        \n        removed = colors.splice(1, 0, \"yellow\", \"orange\");  //insert two items at position 1\n        alert(colors);     //green,yellow,orange,blue\n        alert(removed);    //empty array\n\n        removed = colors.splice(1, 1, \"red\", \"purple\");    //insert two values, remove one\n        alert(colors);     //green,red,purple,orange,blue\n        alert(removed);    //yellow - one item array\n```\n\n### 位置方法\n\nECMAScript5为数组添加了两个位置方法：indexOf()和lastIndexOf()。他们都接受两个参数：要查找的项和（可选）起始位置的索引。\n\nindexOf()从数组开头索引，lastIndexOf()从数组末尾开始索引。\n\n接受两个参数：要查找的项和（可选）表示查找位置地点的索引。返回查找到的位置索引，没找返回-1。比较查找项时会使用全等操作。\n\n```js\nlet arr = [1,2,3,4,5,4,3,2,1];\nconsole.log(arr.indexOf(3));\nconsole.log(arr.lastIndexOf(3));\n\nconsole.log(arr.indexOf(3,3));\nconsole.log(arr.lastIndexOf(3,5));\n\nlet person = { name: \"Nicholas\" };\nlet people = [{ name: \"Nicholas\" }];\nlet morePeople = [person];\nalert(people.indexOf(person));     //-1\nalert(morePeople.indexOf(person)); //0\n```\n\n### 迭代方法\n\n* every()：对数组的每一项运行给定的函数，每一项都返回ture，则返回ture。\n* filter()：对数组的每一项运行给定的函数，返回函数会返回ture组成的数组。\n* forEach()：对数组的每一项运行给定的函数，没有返回值。\n* map()：对数组的每一项运行给定的函数，返回函数调用结果。\n* some()：对数组的每一项运行给定的函数，任意一项返回ture，返回ture。\n\n所有方法都不会修改数组中的包含的值。\n\nevery()\n\n```js\nlet dd = input => input < 9;\n// let dd = function (input) {\n//     return input < 9;\n// }\nlet arr = [1,2,3,4,5];\nconsole.log(arr.every(dd));\t\t//ture\n```\n\nfilter()\n\n```js\nlet ff = word => word.length > 5;\nlet arr2 = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];\nconsole.log(arr2.filter(ff));\n```\n\nforEach()，可以用来遍历数组\n\n```js\nlet arr3 = ['a','b','c',1,2,3];\narr3.forEach(ele => console.log(ele));\n```\n\nmap()\n\n```js\nlet arr4 = [1,2,3,4,5,6];\nconsole.log(arr4.map(sx => (sx + 1) * 2 / 3));\n```\n\nsome()\n\n```js\nlet arr5 = [1,2,3,4,5,6,7,8,9];\nconsole.log(arr5.some(qy => qy % 2 === 0));\n```\n\n### 归并方法\n\nreduce()和reduceRight()。这两个方法都会迭代数组的所有项，然后构建一个最终返回值。reduceRgiht()从数组的最后一项开始遍历到开头。\n\n他们都接受四个参数：\n\n1. Accumulator (acc) (累计器)\n2. Current Value (cur) (当前值)\n3. Current Index (idx) (当前索引)\n4. Source Array (src) (源数组)\n\n```js\nlet arr = [1,2,3,4,5,6];\nconsole.log(arr.reduce((a1,a2) => a1 + a2));\n\nconsole.log(arr.reduceRight((a1,a2) => a1 + a2));\n```\n\n## Date类型\n\nDate类型使用自1970年1月1日开始以来的毫秒数来保存日期。\n\n创建日期对象，使用new操作符和Date构造函数。\n\n```js\nlet dd = new Date();\nlet d2 = new Date(2017, 02, 01);\nlet d3 = new Date(Date.UTC(2000, 2, 3, 21, 23, 31));\n```\n\nDate()构造函数会假设第一个参数是年份，第二个参数是月份，以此类推。\n\nDate.now()返回调用这个方法时日期和时间的毫秒数，可以用来做一个简单计时。\n\n```js\nlet start = Date.now();\nconsole.log(start);\nlet arr = [1,2,3,4,5,666,745,23,441,323,123123,123,123,85858585,,3,23,1,23,123123123123];\nconsole.log(arr.reduce((a1, a2) => a1 + a2));\nlet stop = Date.now();\nconsole.log(stop);\nlet result = stop - start;\nconsole.log(result);\n```\n\n使用+操作符获取Date对象的时间戳也可以达到同样的目的。\n\n```js\nlet test = +new Date();\n```\n\n### 继承的方法\n\n与其他的引用类型一样，Date也重写了toLocalString()、toString()和valueOf()方法。\n\n`toLocaleString()` 方法返回该日期对象的字符串，该字符串格式因不同语言而不同。\n\n`toString()` 方法返回一个字符串，表示该Date对象。\n\n```js\nlet d4 = new Date();\nconsole.log(d4.toLocaleString());\nconsole.log(d4.toString())\n// 3/5/2020, 10:00:01 PM\n// Thu Mar 05 2020 22:00:01 GMT+0800 (China Standard Time)\n```\n\n`valueOf() `方法返回一个 Date 对象的原始值。即返回毫秒数。\n\n## RegExp类型\n\njs通过RegExp类型来支持正则表达式。\n\n创建使用字面量, 构造函数和工厂符号都是可以的：\n\n```js\n/pattern/flags\nnew RegExp(pattern [, flags])\nRegExp(pattern [, flags])\n```\n\nFlags：\n\n* g：全局匹配;找到所有匹配，而不是在第一个匹配后停止\n* i：忽略大小写\n* m：多行; 将开始和结束字符（^和$）视为在多行上工作（也就是，分别匹配每一行的开始和结束（由 \\n 或 \\r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。\n\n使用构造函数创建时，参数需要使用字符串：\n\n```js\nlet pattern2 = new RegExp(\"[bc]at\",\"g\");\n```\n\n所以在构造函数的情况下可能需要双重转义\n\n```js\nlet pattern3 = new RegExp(\"\\\\[bc\\\\]at\",\"g\");\n```\n\n由于实例属性不会重置，所以在循环中再次调用test()方法会失败。第一次找到了cat，第二次会从上一次匹配的末尾开始寻找。\n\n```js\nlet re = null,\n    i;\n\nfor (i = 0; i < 10; i++) {\n    re = /cat/g;\n    re.test('catastrophe');\n}\n\nfor (i = 0; i < 10; i++) {\n    re = new RegExp(\"cat\",\"g\");\n    re.test('catastrophe')\n}\n```\n\n### 实例属性\n\n  `RegExp.prototype.constructor`\n\n  创建该正则对象的构造函数。\n\n  [`RegExp.prototype.global`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global)\n\n  是否开启全局匹配，也就是匹配目标字符串中所有可能的匹配项，而不是只进行第一次匹配。\n\n  [`RegExp.prototype.ignoreCase`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase)\n\n  在匹配字符串时是否要忽略字符的大小写。\n\n  [`RegExp.prototype.lastIndex`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex)\n\n  下次匹配开始的字符串索引位置。\n\n  [`RegExp.prototype.multiline`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline)\n\n  是否开启多行模式匹配（影响 ^ 和 $ 的行为）。\n\n  [`RegExp.prototype.source`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source)\n\n  正则对象的源模式文本。\n\n```js\nconsole.log(pattern.global);\nconsole.log(pattern.ignoreCase);\nconsole.log(pattern.multiline);\nconsole.log(pattern.lastIndex);\nconsole.log(pattern.source);\n```\n\n### 实例方法\n\nexec()和test()。\n\nexec()设置了全局模式也只会返回一个匹配项，多次调用一次返回向后匹配到的值。而不设置全局模式则只返回第一次匹配到的匹配项。\n\n```js\n        var text = \"cat, bat, sat, fat\";        \n        var pattern1 = /.at/;\n        \n        var matches = pattern1.exec(text);        \n        alert(matches.index);    //0\n        alert(matches[0]);       //\"cat\"\n        alert(pattern1.lastIndex);//0\n\n        matches = pattern1.exec(text);        \n        alert(matches.index);    //0\n        alert(matches[0]);       //\"cat\"\n        alert(pattern1.lastIndex);//0\n\n        var pattern2 = /.at/g;\n        \n        var matches = pattern2.exec(text);        \n        alert(matches.index);    //0\n        alert(matches[0]);       //\"cat\"\n        alert(pattern2.lastIndex);//0\n\n        matches = pattern2.exec(text);        \n        alert(matches.index);    //5\n        alert(matches[0]);       //\"bat\"\n        alert(pattern2.lastIndex);//0\n```\n\ntest()接受一个字符串参数，在模式与该参数匹配的情况下返回ture。通常与if语句一起使用。\n\n```js\nlet text = '123-00-12345';\nlet pattern4 = /\\d{3}-\\d{2}-\\d{4}/;\nif (pattern4.test(text)) {\n    console.log('all matched');\n}\n```\n\n## Function类型\n\n函数实际上是对象，函数名是指针。所以函数名与包装对象指针的其他变量没有什么不同。\n\n```js\nfunction sum (a,b) {\n    return a + b;\n}\nlet anotherSum = sum;\nconsole.log(anotherSum(1,2));\n\nsum = null;\nconsole.log(anotherSum(1,2));\n```\n\n构造函数用来创建对象。\n\n### 函数声明提升\n\n解析器会率先读取函数声明，并使其在执行任何代码之前可以访问。至于函数表达式，则必须等到解析器执行到它所在的代码行，才会被真正的解析执行。\n\n就像var的提升一样！\n\n```js\nconsole.log(sum2(10,20));\nfunction sum2(a,b) {\n    return a * b;\n}\n```\n\n但使用函数表达式就不存在这种情况了。\n\n```js\nconsole.log(sum3(10,20));\nlet sum3 = function (a,b) {\n    return a * b;\n}\n```\n\n由于函数在一个初始化语句中，（就算使用var，也只有var的声明会提升，语句并没有初始化）而不是函数声明。\n\n### 作为参数传递\n\n因为函数名本身就是变量，所以函数也可以作为值来使用。(回调)\n\n```js\nfunction add(num) {\n    return num + 10;\n}\nfunction addd(ff,num) {\n    return ff(num);\n}\nconsole.log(addd(add,1));\n```\n\n另一种就是从一个函数中返回另一个函数，实际上就是一个函数嵌套了另一个函数。（闭包）\n\n例如对对象数组进行按照对象属性排序：\n\n```js\nlet data = [\n    {\n        name: 'xfy',\n        age: 18\n    },\n    {\n        name: 'dfy',\n        age: 81\n    }\n]\nfunction com(propertyName) {\n    return function (object1,object2) {\n        let value1 = object1[propertyName];\n        let value2 = object2[propertyName];\n        if (value1 < value2) {\n            return -1;\n        } else if (value1 > value2) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\nconsole.log(data.sort(com('name')));\n```\n\n### 函数内部属性\n\n在函数内部，有两个特殊的对象：arguments和this。arguments的主要作用是保存函数参数，但它还有一个callee的属性。该属性是一个指针，指针指向拥有这个arguments对象的函数。\n\n一个经典的递归函数：\n\n```js\nfunction test(num) {\n    if (num <= 1) {\n        return 1;\n    }\n    return num + test(num - 1);\n}\nconsole.log(test(100));\n```\n\n当遇到使用函数表达式重新指向函数时\n\n```js\nfunction test(num) {\n    if (num <= 1) {\n        return 1;\n    }\n    return num + test(num - 1);\n}\nconsole.log(test(100));\n\nlet test2 = test;\ntest = function() {\n    return 1;\n}\nconsole.log(test2(100));    // 101 test2不能完成回调，因为函数中还是test(num -1)\nconsole.log(test(100));\n```\n\n使用callee就能解决这个问题，类似于对象的this。\n\n```js\nfunction cb(num) {\n    if (num <= 1) {\n        return 1;\n    }\n    return num + arguments.callee(num - 1);\n}\nconsole.log(cb(100));\nlet cb2 = cb;       // 指针交换\ncb = function() {\n    return 0;\n}\nconsole.log(cb2(100));\nconsole.log(cb(100));\n```\n\n> 函数的名字仅仅只是一个包含指针的变量而已。\n\nECMAScript5还定义了一个函数对象的属性：caller。它保存着调用当前函数的函数的引用。如果是在全局作用域中调用当前函数，它的值为null。\n\n```js\nfunction outer() {\n    return inner();\n}\nfunction inner() {\n    return inner.caller;\n}\nconsole.log(outer());\n```\n\n甚至还能更进一步解耦合：\n\n```js\nfunction outer() {\n    return inner();\n}\nfunction inner() {\n    return arguments.callee.caller;\n}\n```\n\n在严格模式下，访问`arguments.callee`和`arguments.caller`都会导致访问错误。且不能为函数的caller属性赋值，否则会导致错误。\n\n### 函数属性与方法\n\njs中的函数也是对象，所以函数也有属性和方法。每个函数都包含两个属性：length和prototype。\n\nlength属性表示函数希望接受的命名参数的个数。\n\n```js\nfunction test(arg1,arg2) {\n    return arg1 + arg2;\n}\nconsole.log(test.length);\n```\n\n对于引用类型而言，prototype是保存它们所有实例方法的真正所在。prototype属性是不可枚举的，所以用for-in是无法发现的。\n\n每个函数都包含两个非继承而来的方法：apply()和call()。它们常用来动态改变this的值。call()与apply()相同，它们区别仅在接受参数的方式不同。第一个参数是this值，第二个参数分别是逐个传参和数组传参。\n\n```js\nfunction fruits() {};\n\nfruits.prototype = {\n    color: 'red',\n    say: function() {\n        console.log('the color is : ' + this.color);\n    }\n}\nlet apple = new fruits();\nconsole.log(apple);\nconsole.log(apple.say());\n\nlet banana = {\n    color: 'yellow'\n}\nconsole.log(apple.say.apply(banana));\n```\n\n除了在对象中的应用，call和apply真正的用武之地是扩充函数的作用于。\n\n```js\nwindow.color = 'red';\nlet o = {\n    color: 'blue'\n};\nfunction sayColor() {\n    return this.color;\n}\nsayColor()\n\"red\"\nsayColor.call(o)\n\"blue\"\nsayColor.call(window)\n\"red\"\n```\n\n除此之外还有一个方法：bind()。这个方法会创建一个函数的实例，其this值会被绑定到传给bind()函数的值。\n\n```js\nwindow.color = 'red';\nlet o = {\n    color: 'blue'\n};\nfunction sayColor() {\n    return this.color;\n}\n\nlet sayAnotherColor = sayColor.bind(o);\nsayAnotherColor();\n\"blue\"\n```\n\n### 基本包装类型\n\n三个特殊的引用类型：Boolean、Number和String。\n\n包装对象都会经过三个步骤：\n\n1. 创建String或其他类型的一个实例；\n2. 在实例上调用指定的方法；\n3. 销毁这个实例；\n\n也就是类似于这样的操作：\n\n```js\nlet s1 = new String('some string');\nlet s2 = s1.length;\ns1 = null;\n```\n\n引用类型与基本包装类型的主要区别就是对象的生存期。使用new操作符创建的引用类型的实例，在执行流离开当前作用域之前一直都保存在内存中。而包装对象，则只存在执行代码的一瞬间，然后立即被销毁。所以不能在运行时为基本类型添加属性和方法。\n\n```js\nlet s1 = 'xfy';\ns1.color = 'pink';\nconsole.log(s1.color);\t// undefined\n```\n\n在第二行创建的String对象在执行第三行代码时就已经被销毁了，第三行代码则又创建自己String对象，而没有第二行创建color属性。\n\nObject构造函数也会像工厂方法一样，根据传入值的类型来返回相应基本包装类型的实例。\n\n```js\nlet test = new Object('xfy');\ntypeof test\n\"object\"\ntest instanceof String\ntrue\ntest instanceof Number\nfalse\ntest instanceof Object\ntrue\n```\n\n使用new调用资本包装类型的构造函数，与直接调用同名的转型函数是不一样的。\n\n```js\nlet value = '25';\nlet test = Number(value);\ntypeof test\n\"number\"\n\nlet test2 = new Number(25);\ntypeof test2;\n\"object\"\n```\n\n> 不建显式的创建基本包装类型的对象。\n\n## Boolean类型\n\nBoolean有基本类型与引用类型。使用Boolean对象构造的值为引用类型。Boolean类型的实例重写了valueOf()与toString()。\n\n```js\nlet b = new Boolean(false);     // falseObject\nlet bb = true;\nlet b2 = false;     // falseValue\nconsole.log(b && bb);   //true\nconsole.log(b2 && bb);  //false\n```\n\n布尔表达式中所有对象都会被转为true，因此引用类型的Boolean都会被转为true。\n\n基本类型与引用类型的Boolean还有两个区别：\n\n* typeof对基本类型返回”Boolean“。对引用类型返回”Object“；\n* Boolean对象是Boolean类型的实例，所以instanceof会返回true。而基本类型则返回false；\n\n> 建议不要使用Boolean对象。\n\n## Number类型\n\nNumber类型也重写了valueOf()、toLocaleString()和toString()。\n\ntoString()可以传递一个表示基数的参数，将返回进制化数值的字符串形式。\n\n```js\nlet num = 123;\nconsole.log(num.toString(2));\nconsole.log(num.toString(8));\nconsole.log(num.toString(16));\n```\n\n除了继承的方法之外，Number类型还提供了一些用于将数值格式化为字符串的方法。toFixed()方法返回指定位数的小数。\n\n当小数比指定位数还多一位的情况下，就会舍入。\n\n```js\nlet num = 123;\nconsole.log(num.toFixed(2));\nconsole.log(num.toFixed(20));\nnum = 12.005;\nconsole.log(num.toFixed(2));\n```\n\n> 通常情况下toFixed()可以表示0-20位小数，但这只是标准实现的范围。有些运行环境可以支持更多。\n\n也有用于格式化为指数表示法的方法，toExponential()（e表示法）。toExponential()接受一个参数，指定输出结果的小数的位数。返回也是字符串形式。\n\n```js\nlet num = 123;\nlet num2 = num.toExponential(10);\nconsole.log(num2);  // 1.2300000000e+2\n```\n\n还有toPrecision()会根据情况来使用toFixed()或者是toExponential()。\n\n```js\nlet num = 123;\n\nconsole.log(num.toPrecision(1));\nconsole.log(num.toPrecision(2));\nconsole.log(num.toPrecision(3));\nconsole.log(num.toPrecision(4));\nconsole.log(num.toPrecision(5));\nconsole.log(num.toPrecision(6));\n\n1e+2\n1.2e+2\n123\n123.0\n123.00\n123.000\n```\n\nNumber与Boolean一样，实例化Number类型在使用typeof和instanceof时，会有完全不同的结果。\n\n```js\nlet num = 123;\nlet num2 = new Number(123);\nconsole.log(typeof num);\t\t// \"Number\"\nconsole.log(typeof num2);\t\t// \"Object\"\nconsole.log(num instanceof Number);\t\t// false\nconsole.log(num2 instanceof Number);\t// true\n```\n\n## String类型\n\nString类型是字符串的对象包装类型。\n\n```js\nlet str = new String('xfy');\n```\n\n访问特定字符方法：charAt()和charCodeAt()，接受一个参数，从0开始的字符位置。\n\n```js\nlet str = 'xfy';\nconsole.log(str.charAt(1));\nconsole.log(str.charCodeAt(1));\n```\n\n还有另一个访问个别字符的方法，类似于访问数组\n\n```js\nconsole.log(str[1]);\n```\n\n操作方法\n\n除了`+`拼接字符串，还有类似于数组的concat()方法。用于将一个或多个字符串拼接起来，返回新的字符串。\n\n```js\nlet str2 = 'yyy';\nconsole.log(str.concat('abc',str2));\n```\n\n还有三个基于字符串创建新字符串的方法，基于字符串修改或裁减。返回新的字符串。slice()、substr()和substring()。它们都接受两个参数，第一个参数指定字符串开始的位置，第二个参数（可选）表示字符串到哪里结束。\n\n```js\nlet str = 'xiaofeiyang';\nconsole.log(str.slice(4));\nconsole.log(str.substr(4));\nconsole.log(str.substring(4));\nconsole.log('---');\nconsole.log(str.slice(4,7));\nconsole.log(str.substr(4,7));\nconsole.log(str.substring(4,7));\n\nfeiyang\nfeiyang\nfeiyang\n---\nfei\nfeiyang\nfei\n```\n\n","desc":"这是来自Professional JavaScript for Web Develops第五章的笔记。\n\njavascript\n\n基本类型和引用类型\n\n基本类型值指的是简单的数据段。\n\n引用类型值指那...","title":"JavaScript 笔记-引用类型","date":"2020-01-06T09:14:53.000Z","tags":"JavaScript","categories":"笔记","url":"javascript-notes-reference-type","index_img":"/images/JavaScript笔记-引用类型/javascript.webp"}},"__N_SSG":true}