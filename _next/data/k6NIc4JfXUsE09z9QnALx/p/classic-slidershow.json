{"pageProps":{"postData":{"id":"classic-slidershow","content":"\n## 传统方式\n\n[项目地址](https://git.defectink.com/xfy/classic-slider)\n\n传统方式实现轮播也算一个不小的工程量了，基本布局就是将所有的图片横向布局，并在首位分别克隆最后和第一张图片。当切换到克隆的图片时，并在动画播放快结束时，将这个图片队列复位。\n\n![](../images/经典轮播图的实现方案/2021-02-13-15-37-51.webp)\n\n当整个队列切换完了之后，会切换到克隆的 #1 图片上，再动画完成之后，我们悄悄的将其切换为真正的第一张图片。\n\n![](../images/经典轮播图的实现方案/2021-02-13-15-39-13.webp)\n\n## 传统方式的实现\n\n为了给各种数量的图片做适应，所以整个队列的宽度就不固定死了，而使用 JavaScript 动态生成，包括图片索引的小圆点。\n\n### HTML\n\n整个框架非常的简单，一个外层 div 中有三个主要的结构，分别是：用于存放图片的无序列表、左右按钮和小圆点索引。\n\n```html\n<div class=\"wrapper\">\n  <div class=\"slider\" id=\"slider\">\n    <ul class=\"clear-fix\">\n      <li><img src=\"./img/1.jpg\" alt=\"\" class=\"roll-img\" /></li>\n      <li><img src=\"./img/2.png\" alt=\"\" class=\"roll-img\" /></li>\n      <li><img src=\"./img/3.png\" alt=\"\" class=\"roll-img\" /></li>\n      <li><img src=\"./img/4.jpg\" alt=\"\" class=\"roll-img\" /></li>\n      <li><img src=\"./img/5.jpg\" alt=\"\" class=\"roll-img\" /></li>\n    </ul>\n    <div class=\"btn btn-left\">\n      <span><</span>\n    </div>\n    <div class=\"btn btn-right\">\n      <span>></span>\n    </div>\n    <div class=\"index-box\">\n      <ol></ol>\n    </div>\n  </div>\n</div>\n```\n\n### CSS\n\nCSS 方面，主要值得注意的就是 ul 和 li，他们分别为绝对定位`position: absolute;`和左浮动`float: left;`。\n\n对 ul 使用绝对定位就可以控制其`left`属性来实现左右移动的动画效果。而对 li 使用左浮动是为了将所有的图片都排列成一行。\n\n```css\n.slider {\n  transition: all 300ms;\n  position: relative;\n  height: 100%;\n  border-radius: 14px;\n  /* overflow: hidden; */\n}\n.slider ul {\n  position: absolute;\n  top: 0;\n  left: -400px;\n  /* width: 700%; */\n  /* height: 100%; */\n  list-style: none;\n}\n.slider ul li {\n  float: left;\n}\n\n.roll-img {\n  width: 400px;\n}\n\n.clear-fix::after {\n  content: \"\";\n  clear: both;\n  display: block;\n  height: 0;\n}\n```\n\n## JavaScript\n\nJavaScript 方面内容值得为它写成一个二级标题。它有多个部分组成，在 JavaScript 做的事情有：\n\n* 动态根据图片生成圆点；\n* 克隆需要的图片节点；\n* 动态添加小圆点样式；\n* 左右翻页按钮的监听器；\n* 移动方法；\n* 重置整个图片队列；\n\n### 初始化\n\n这次使用 ES6 的 class 来创建对象，并初始化整个轮播图。第一步要做的就是在`constructor()`中选中和定义需要的数据：\n\n```js\nclass Slider {\n  constructor(id) {\n    // 外层div\n    this.wrapper = document.querySelector(id);\n    this.pics = this.wrapper.querySelector('ul');\n    // 小圆点外层\n    this.index = this.wrapper.querySelector('.index-box');\n    // 小圆点索引\n    this.indexPoint = 1;\n    // 单个图片宽度\n    this.picWidth = this.wrapper.clientWidth;\n    // 总共图片个数\n    this.sliders = this.pics.children.length;\n    // 按钮点击间隔\n    this.startMs = Date.now();\n    // 点击小圆点的间隔\n    this.movePoint = 0;\n    // 初始化方法\n    this.init();\n  }\n}\n```\n\n`init()`方法中主要就是其他一些方法的集中运行，他们分别是：初始化圆点、克隆图片和左右按钮：\n\n```js\n  init() {\n    console.log('init!');\n    this.initPoint();\n    this.clonePic();\n    this.lR();\n  }\n```\n\n### 初始化圆点\n\n初始化圆点主要做的三件事：\n\n1. 根据图片数量生成圆点个数；\n2. 为第一个圆点添加激活的样式；\n3. 监听点击事件；\n\n这里使用了 document fragment 来将所有生成的圆点一次性的插入到 DOM 里，从而减少操作 DOM 的频率。\n\n其中比较复杂的部分在于监听点击事件，它不仅仅要为点击的圆点添加相应激活的样式，还要判断圆点的左右和距离来移动对应距离的图片。\n\n在事件代理里，需要做一个小判断`if (e.target.nodeName.toString().toLowerCase() == 'li')`，不然点击到了父 div 元素会取不到对应的属性而报错。\n\n这里判断点击圆点后的左右移动使用时，定义了两个变量，他们分别是：\n\n```js\n    // 小圆点索引\n    this.indexPoint = 1;\n    // 点击小圆点的间隔\n    this.movePoint = 0;\n```\n\n`this.indexPoint`就是自定义的 Attribute，通过判断`this.indexPoint`上一次和这一次点击的大小，就可以判断出点击的圆点是在左边还是在右边，从而向对应的方向移动图片。\n\n而图片移动的距离使则就是`小圆点的间隔 * 单张图片的宽度`，这里调用的是自定义的`move()`方法，它接受的参数就是图片移动的距离`this.move(-this.picWidth * this.movePoint);`。\n\n`this.picWidth`是提前定义好的单张图片的宽度，通过`this.wrapper.clientWidth;`来获取\n\n```js\n  initPoint() {\n    // 获取图片的总个数\n    let num = this.pics.children.length;\n    // 使用 fragment 片段来只操作一次 DOM 插入所有圆点\n    let frg = document.createDocumentFragment();\n    // 循环生成\n    for (let i = 0; i < num; i++) {\n      let li = document.createElement('li');\n      // 设置自定义 Attribute，用来标识和应用样式；\n      li.setAttribute('data-index', i + 1);\n      // 默认激活状态\n      if (i == 0) {\n        li.className = 'active';\n      }\n      // 插入到 fragment\n      frg.append(li);\n    }\n    // 动态生成 ol 宽度\n    this.index.children[0].style.width = num * 10 * 2 + 'px';\n    this.index.children[0].append(frg);\n    // 添加点击事件，获取index\n    this.index.children[0].addEventListener('click', (e) => {\n      // 利用事件冒泡做事件代理，只点击到 li 元素生效\n      if (e.target.nodeName.toString().toLowerCase() == 'li') {\n        let ip = e.target.getAttribute('data-index');\n        // 判断点击的圆点间隔，从而决定移动多少图片\n        if (this.indexPoint < ip) {\n          this.movePoint = ip - this.indexPoint;\n          this.indexPoint = Number(ip);\n          // 调用 move() 方法来移动图片，移动的距离为圆点的间隔 * 单张图片的宽度\n          this.move(-this.picWidth * this.movePoint);\n        } else {\n          this.movePoint = this.indexPoint - ip;\n          this.indexPoint = Number(ip);\n          this.move(this.picWidth * this.movePoint);\n        }\n      }\n    });\n  }\n```\n\n### 克隆节点\n\n前面曾提到过，需要手动的克隆前后两张图片，并再将其放调换放在前后。由于在第一张图片的前面添加了一张克隆的最后一张图，所以需要将 ul 的左偏移提前设置为负的一张图片的宽度。\n\n并且整个 ul 的宽度为所有图片加在一起的宽度。\n\n```js\n  clonePic() {\n    // 克隆第一个元素\n    let first = this.pics.firstElementChild.cloneNode(true);\n    // 克隆最后一个元素\n    let last = this.pics.lastElementChild.cloneNode(true);\n    this.pics.append(first);\n    this.pics.insertBefore(last, this.pics.firstElementChild);\n    // 动态设定宽度\n    this.pics.style.width = this.pics.children.length * 100 + '%';\n    // 动态设定漂移\n    this.pics.style.left = -1 * this.picWidth + 'px';\n  }\n```\n\n### 左右按钮\n\n左右翻页按钮的基本框架在 HTML 中已经写好，接下来就是动态的监听事件了。\n\n这两个按钮里主要就是监听点击的事件，主要的功能还是在移动方法`move()`里。\n\n这里还在每次点击结束后记录了下当前的时间戳，当再次点击按钮时会比较当前点击的时间戳和记录的时间戳，如果小于 310ms 则什么也不做。\n\n```js\n  lR() {\n    // 选中左右按钮，并添加监听器\n    this.wrapper.querySelector('.btn-left').addEventListener('click', () => {\n      // 记录上一次点击的时间戳，310ms 内的连续点击将不生效\n      if (Date.now() - this.startMs > 310) {\n        // 圆点越界时重置其 index\n        if (this.indexPoint - 1 < 1) {\n          this.indexPoint = this.sliders;\n        } else {\n          this.indexPoint--;\n        }\n        this.move(this.picWidth);\n        this.startMs = Date.now();\n      }\n    });\n    this.wrapper.querySelector('.btn-right').addEventListener('click', () => {\n      // 记录上一次点击的时间戳，310ms 内的连续点击将不生效\n      if (Date.now() - this.startMs > 310) {\n        // 圆点越界时重置其 index\n        if (this.indexPoint + 1 > this.sliders) {\n          this.indexPoint = 1;\n        } else {\n          this.indexPoint++;\n        }\n        this.move(-this.picWidth);\n        this.startMs = Date.now();\n      }\n    });\n  }\n```\n\n### 移动方法\n\n在前面的按钮里调用了移动方法`move()`，并传递了一个宽度作为参数。这个参数就用作于 css 的`left`值，当为负数时整个队列向左移动，反之，向右移动。\n\n仔细一看也不是非常的复杂，基本的移动方法就是：获取当前的`left`值，然后加上传递进来的 width 参数，最后最为最新的`left`值赋值到 ul 上。\n\n最重要的，也就是整个轮播图的核心部分就是重置队列那部分。当当前的`left`值等于负的第一张图片时，也就是队列滚动到了克隆的 #5 图片上了。图片切换动画的时间是 300ms，在第 295ms 时我们就需要悄悄的将 ul 的动画移除，并将整个队列移动到正真的第五张图片上。这样就可以实现无缝的轮播滚动了。反之亦然。\n\n![](../images/经典轮播图的实现方案/2021-02-13-15-37-51.webp)\n\n```js\n  move(width) {\n    // 获取当前的 left 值\n    let left = parseFloat(this.pics.style.left);\n    // 添加 300ms 的动画\n    this.pics.style.transition = `all 300ms`;\n    // 通过移动正负值来确定左右\n    this.pics.style.left = left + width + 'px';\n    // 狸猫换太子\n    if (left == -this.picWidth && width > 0) {\n      // 动画为300ms，当为最后一张图的时候，295ms后替换整个ul\n      setTimeout(() => {\n        this.pics.style.transition = `none`;\n        this.pics.style.left = -this.sliders * this.picWidth + 'px';\n      }, 295);\n    } else if (left == -this.sliders * this.picWidth && width < 0) {\n      setTimeout(() => {\n        this.pics.style.transition = `none`;\n        this.pics.style.left = -this.picWidth + 'px';\n      }, 290);\n    }\n    // 应用圆点样式\n    this.modIndexPoint();\n  }\n```\n\n### 动态添加圆点样式\n\n最后一个小功能就是动态的添加圆点的激活样式，这个部分非常的简单，一些基本操作。\n\n首先将所有的圆点的样式都移除，然后在索引的圆点上添加`active`的样式。\n\n```js\n  modIndexPoint() {\n    let points = Array.from(this.index.children[0].children);\n    for (let i of points) {\n      i.className = '';\n    }\n    points[this.indexPoint - 1].className = 'active';\n  }\n```\n\n## Vue\n\n[项目地址](https://git.defectink.com/xfy/vue-slider)\n\nVue 由数据驱动，配合上其过渡样式，可以轻松实现另一种无限轮播的方案。\n\n### 数据驱动\n\n将所有的图片都使用`position: absolute`定位保持在同一个位置，然后配合`v-show`来显示图片。当图片能够成功显示时，配合 Vue 的过渡动画就能够实现无缝的切换了。\n\n这里使用了`v-for`来动态的创建图片 DOM，外层由`transition-group`定义为 ul，而内部 li 则封装为一个组件：\n\n```html\n    <transition-group :name=\"dest\" tag=\"ul\" class=\"img\">\n      <ImgItem v-for=\"(item, i) in images\" :key=\"item.id\" v-show=\"show == i\">\n        <template>\n          <img :src=\"item.src\" />\n        </template>\n      </ImgItem>\n    </transition-group>\n```\n\n而`v-show`呢，则配合 images 列表的下标显示，当图片的下标与定义的变量 show 相同时`v-show=\"show == i\"`则显示这个图片。\n\n```js\ndata() {\n  return {\n    images: [\n      { id: 1, src: require('../../assets/img/1.webp') },\n      { id: 2, src: require('../../assets/img/2.webp') },\n      { id: 3, src: require('../../assets/img/3.webp') },\n      { id: 4, src: require('../../assets/img/4.webp') },\n      { id: 5, src: require('../../assets/img/5.webp') }\n    ],\n    show: 0,\n  }\n```\n\n### 切换图片\n\n在考虑过渡动画之前，应该先把切换图片的功能做好。\n\n切换功能非常的简单，刚刚定义的 show 变量便是驱动图片显示的数据。而切换图片只要增加和减少这个 show 变量即可，只需要注意防止其越界。\n\n```html\n    <div class=\"btn btn-left\" @click=\"previous\">\n      <ImgBtn>\n        <template>\n          <i class=\"iconfont icon-next\"></i>\n        </template>\n      </ImgBtn>\n    </div>\n    <div class=\"btn btn-right\" @click=\"next\">\n      <ImgBtn>\n        <template>\n          <i class=\"iconfont icon-next\"></i>\n        </template>\n      </ImgBtn>\n    </div>\n```\n\n这里的`this.dest`是稍后用作动画过渡而定义的方向。\n\n```js\nmethods: {\n  next() {\n    this.dest = 'img-next';\n    this.show == this.images.length - 1 ? (this.show = 0) : this.show++;\n  },\n  previous() {\n    this.dest = 'img-previous';\n    this.show == 0 ? (this.show = this.images.length - 1) : this.show--;\n  },\n}\n```\n\n### 小圆点\n\n同样的小圆点也是封装为一个小组件，外部直接使用 ol 来嵌套。同样的，小圆点的数量由图片来决定，所以它也是遍历`v-for`images 数组。\n\n而小圆点的激活样式同样的也是由变量 show 来进行驱动，当 show 等于当前下标时，则激活样式。小圆点和图片的激活都由同一个变量驱动，这样在修改这一个变量时，小圆点和图片都能正确切换到对应的序列。\n\n```html\n    <ol class=\"img-point\" @click=\"pointClick\">\n      <ImgPoint v-for=\"(item, i) in images\" :key=\"item.id + 'point'\">\n        <template>\n          <i :class=\"{ active: show == i }\" :id=\"i\"></i>\n        </template>\n      </ImgPoint>\n    </ol>\n```\n\n小圆点这里绑定了一个 id 为数组下标，这样当点击到当前下标的圆点时，就能通过事件修改 show 的值了。这里事件同样使用事件代理。\n\n这里的 if 判断是用来判断后续过渡动画的方向的。\n\n```js\n    pointClick(e) {\n      console.log(e.target.id);\n      if (e.target.nodeName.toString().toLowerCase() == 'i') {\n        this.show > e.target.id\n          ? (this.dest = 'img-previous')\n          : (this.dest = 'img-next');\n        this.show = e.target.id;\n      }\n    },\n```\n\n### 过渡动画\n\n这里使用了 Vue 的过渡效果，正向移动时，将即将进入的图片向右偏移一个自身宽度，然后再慢慢的过渡进当前的区域，离开的图片也是同理，慢慢的过渡到向左偏移一个自身宽度。\n\n![](../images/经典轮播图的实现方案/2021-02-02-14-52-48.webp)\n\n```css\n.img-next-enter-active,\n.img-next-leave-active,\n.img-previous-enter-active,\n.img-previous-leave-active {\n  transition: all 300ms;\n}\n.img-next-enter,\n.img-previous-leave-to {\n  transform: translateX(100%);\n}\n.img-next-enter-to,\n.img-next-leave,\n.img-previous-enter-to,\n.img-previous-leave {\n  transform: translateX(0);\n}\n.img-next-leave-to,\n.img-previous-enter {\n  transform: translateX(-100%);\n}\n```\n\n稍微复杂一点的就是左右方向移动时，对应的动画顺序是不一样的。所以这里的`<transition-group :name=\"dest\" tag=\"ul\" class=\"img\">`的 name 的值是动态绑定的。当向什么方向移动时，就应用什么方向的 css。\n\n上述左右按钮的点击和小圆点的点击事件里均有修改对应方向的值。\n\n```js\n  data() {\n    return {\n      dest: 'img-next',\n    }\n```\n\n### 自动播放\n\n图片自动滚动不是什么复杂的事情，设置一个定时器就能解决。\n\n```js\n    autoPlay() {\n      this.dest = 'img-next';\n      this.timer = setInterval(() => {\n        this.show == 4 ? (this.show = 0) : this.show++;\n      }, 3000);\n    },\n```\n\n此外在绑定两个鼠标移入和移除的事件，用来设置暂停和继续播放。\n\n```html\n@mouseover=\"pausePlay\" @mouseout=\"continuePlay\"\n```\n\n```js\n    pausePlay() {\n      clearInterval(this.timer);\n    },\n    continuePlay() {\n      this.autoPlay();\n    }\n```\n\n## 🎉\n\n这里的 Vue 实现方案主要是用于 PC 端的，它可以利用 Vue 的 `transition-group`来过渡切换的图片，轻松实现无限循环。\n\n但这个方案的一个缺点就是对于触屏的移动端不是很友好，单靠`transition-group`来给滑动时显示图片会比较复杂。更佳的实现方案还是将上述传统的实现方式封装成一个组件，后续再考虑实现一下。","desc":"传统方式\n\n项目地址\n\n传统方式实现轮播也算一个不小的工程量了，基本布局就是将所有的图片横向布局，并在首位分别克隆最后和第一张图片。当切换到克隆的图片时，并在动画播放快结束时，将这个图片队列复位。\n\n...","title":"经典轮播图的实现方案","date":"2021-02-09T13:37:00.000Z","tags":["Vue","JavaScript"],"categories":"实践","url":"classic-slidershow","index_img":"/images/经典轮播图的实现方案/logo.webp"}},"__N_SSG":true}