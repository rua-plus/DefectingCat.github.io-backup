{"pageProps":{"postData":{"id":"ajax-getting-started","content":"\n## Ajax\n\nAjax 是异步的 JavaScript 和 XML（Asynchronous JavaScript And XML）。简单点说，就是使用`XMLHttpRequest`对象与服务器通信。 它可以使用 JSON，XML，HTML 和 text 文本等格式发送和接收数据。Ajax 最吸引人的就是它的“异步”特性，也就是说它可以在不重新刷新页面的情况下与服务器通信，交换数据，或更新页面。\n\nAjax 最主要的两个特性：\n\n* 在不重新加载页面的情况下发送请求给服务器。\n* 接受并使用从服务器发来的数据。\n\n![](../images/某咸鱼的AJAX入门/2020-12-24-19-40-22.webp)\n\n## 发送http请求\n\n`XMLHttpRequest`方法就是发送请求必要的一个方法，通过该方法创建的实例来发送请求。\n\n```js\nlet httpRequest = new XMLHttpRequest();\n```\n\n大部分现代浏览器都实现了`XMLHttpRequest`方法，当然也包括微软。不过早期的IE6或之前的浏览器是通过`ActiveXObject`方法来实现的。为了兼容早期的 IE 浏览器，我们可能需要这要写：\n\n```js\nif (window.XMLHttpRequest) { // Mozilla, Safari, IE7+ ...\n    httpRequest = new XMLHttpRequest();\n} else if (window.ActiveXObject) { // IE 6 and older\n    httpRequest = new ActiveXObject(\"Microsoft.XMLHTTP\");\n}\n```\n\n不过随着时间的流逝，IE6 早已被淘汰，所以目前的兼容性无需多虑。\n\n当发送了一个请求之后，就是得到相应的响应。得到响应后我们需要通知JS如何处理，这时就需要给实例的`onreadystatechange`属性赋值一个方法，当请求状态改变时调用该方法。\n\n```js\nhttpRequest.onreadystatechange = someFunction;\n```\n\n当然也可以使用匿名函数：\n\n```js\nhttpRequest.onreadystatechange = () => {\n    // balabalabala\n}\n```\n\n当我们能够处理响应的时候，就可以发送一个实际的请求了。通过调用 HTTP 请求对象的`open()`和`send()`方法：\n\n```js\nhttpRequest.open('GET', 'https://www.defectink.com/balabala.html', true);\nhttpRequest.send();\n```\n\n* `open()`的第一个参数是 HTTP 请求方法 - 有 GET，POST，HEAD 以及服务器支持的其他方法。 保证这些方法一定要是大写字母，否则其他一些浏览器（比如 FireFox）可能无法处理这个请求。\n* 第二个参数是要发送的 URL。由于安全原因，默认不能调用第三方 URL 域名。\n* 第三个可选参数是用于设置请求是否是异步的。true 为默认值。\n\n## 处理服务器响应\n\n`onreadystatechange`被赋值的函数负责处理响应，这个函数首先要检查请求的状态，根据状态来决定后面执行的任务。\n\n如果状态的值是`XMLHttpRequest.DONE`（对应的值是 4），意味着服务器响应收到了并且是没问题的，然后就可以继续执行。\n\n```js\nif (httpRequest.readyState === 4) {\n    // Everything is good, the response was received.\n} else {\n    // Not ready yet.\n}\n```\n\n全部的`readyState`状态的值为：\n\n* 0 (未初始化) or (请求还未初始化)\n* 1 (正在加载) or (已建立服务器链接)\n* 2 (加载成功) or (请求已接受)\n* 3 (交互) or (正在处理请求)\n* 4 (完成) or (请求已完成并且响应已准备好)\n\n当然接下来再继续检查 HTTP 的`response code`。可以通过响应码 200 来判断Ajax有没有成功。\n\n```js\nif (httpRequest.status === 200) {\n    // Perfect!\n} else {\n    // There was a problem with the request.\n    // For example, the response may have a 404 (Not Found)\n    // or 500 (Internal Server Error) response code.\n}\n```\n\n当检查完请求状态和 HTTP 响应码后， 就可以使用服务器返回的数据了。有两种方法来访问这些数据：\n\n* `httpRequest.responseText` – 服务器以文本字符的形式返回\n* `httpRequest.responseXML` – 以 XMLDocument 对象方式返回，之后就可以使用 JavaScript 来处理\n\n当然这一步只有在发起的请求是异步的时候有效。如果发起的请求时同步请求则不必使用函数，但是并不推荐这样做。\n\n## 实例\n\n也算一个总结吧：\n\n1. 通过`XMLHttpRequest`生成一个实例\n2. 为实例的`onreadystatechange`方法添加一个处理响应的方法\n3. 发送请求，`open()`与`send()`\n4. 在处理响应的方法中判断状态值与HTTP响应码(4 && 200)\n5. 处理响应`responseText`与`responseXML`\n\n```js\nconst btn = document.querySelector('.btn');\nconst title = document.querySelector('.title')\nbtn.addEventListener('click', makeRequest);\n\nlet httpRequest;\nfunction makeRequest() {\n    httpRequest = new XMLHttpRequest();\n    if (!httpRequest) {\n        throw new Error(':( Cannot create an XMLHTTP instance');\n        console.error(httpRequest);\n        return false;\n    }\n    httpRequest.onreadystatechange = handler;\n\n    httpRequest.open('GET', 'http://localhost/text.txt');\n    httpRequest.send();\n}\n\nfunction handler() {\n    if (httpRequest.readyState === 4 && httpRequest.status === 200) {\n        title.textContent = httpRequest.responseText;\n    } else {\n        console.log('There was a problem with the request.');;\n        console.log(httpRequest.readyState);\n        console.log(httpRequest.status);\n    }\n}\n```\n\n## jQuery中的Ajax\n\njQuery 极大的简化了原生 JavaScript 的一些繁琐操作，同时它也提供一些 Ajax 方法来简化操作。\n\n### ajax方法\n\njQuery 提供了一个`$.ajax()`方法，方便去操作 Ajax。该方法是 jQuery 底层 Ajax 实现。简单易用的高层实现见`$.get`,`$.post`等。`$.ajax()`返回其创建的 XMLHttpRequest 对象。大多数情况下无需直接操作该函数。\n\n这个方法接受一个参数，这个参数为键值对集合（对象），其中包含了 Ajax 请求的键值对集合，所有选项都是可选的。也可以通过`$.ajaxSetup()`设置任何选项的默认值。\n\n```js\n$.ajax({\n    url: 'test.txt',\n    async: false\n});\n```\n\n### 回调\n\n和原生 JavaScript 一样，jQuery 也可以通过参数来设定是否同步执行（async）。当异步执行时，可以使用`success`参数来执行一个回调函数。回调函数支持传递一个参数，参数为 response。\n\n```js\n$.ajax({\n    url: 'test.txt',\n    success: function (result) {\n        $('.title').html(result);\n    }\n});\n```\n\n### 其他方法\n\njQuery 同样提供了一些其他简易易用的方法，例如`load()`方法，通过 Ajax 请求从服务器加载数据，并把返回的数据放置到指定的元素中。\n\n按照传统的方法利用 jQuery 来写一个传递文本到元素可能需要这样：\n\n```js\n$(document).ready(function () {\n    $('.btn').click(function () {\n        $.ajax({\n            url: 'test.txt',\n            success: function (result) {\n                $('.title').html(result);\n            }\n        });\n    })\n})\n```\n\n而`load()`方法更加简洁，往往只可能需要一行：\n\n```js\n$(document).ready(function () {\n    $('.btn').click(function () {\n        $('.title').load('test.txt');\n    })\n})\n```\n\n不过越是简洁的方法越是难以捉摸以及不方便自定义其他的参数。\n\n无论怎么说，jQuery 提供了更加便利的手段来完成原本繁琐的事情，且仅仅只是多用了 300+kb 的源码。","desc":"Ajax\n\nAjax 是异步的 JavaScript 和 XML（Asynchronous JavaScript And XML）。简单点说，就是使用XMLHttpRequest对象与服务器通信。 它...","title":"某咸鱼的 AJAX 入门🐟","date":"2020-12-24T19:41:02.000Z","tags":"JavaScript","categories":"笔记","url":"ajax-getting-started","index_img":"/images/某咸鱼的AJAX入门/logo.webp"}},"__N_SSG":true}