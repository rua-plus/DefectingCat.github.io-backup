{"pageProps":{"totalNum":69,"pagingSize":10,"allPages":7,"postDatas":[{"id":"Rust-循环引用与内存泄漏","desc":"是的，Rust 是一门注重内存安全的语言，它独特的所有权与生命周期能够帮助我们在编译时就找到可能存在的内存泄露的问题。\n\n但为了一些特殊场景，Rust 标准库中也提供了一些让我们能够在运行时检查所有权...","title":"Rust-循环引用与内存泄漏","date":"2022-01-03T18:04:40.000Z","tags":"Rust","categories":"笔记","url":"rust-reference-cycles-and-memory-leak"},{"id":"我的开发环境-create-react-app","desc":"创建项目\n\nCreate React App 自带 TypeScript 的 template，所以直接创建即可。\n\n\n\n或者\n\n\n\nAbsolute imports\n\n绝对路径引入有点类似于 web...","title":"我的开发环境-create-react-app","date":"2021-12-30T03:12:29.000Z","tags":"React","categories":"笔记","url":"my-development-environment-create-react-app","index_img":"/images/我的开发环境-create-react-app/logo.svg"},{"id":"JavaScript中的结构体克隆","desc":"由于 JavaScript 中值的特性，加上语言标准库没有实现深克隆的方法。导致很长一段时间依赖深克隆都是依赖第三方库或者使用 JSON 来处理，甚至是使用递归来自己拷贝值。\n\n目前最新的语言特性中提...","title":"JavaScript 中的结构体克隆","date":"2021-12-17T15:29:30.000Z","tags":["JavaScript"],"categories":"实践","url":"javascript-structured-clone"},{"id":"在Linode上安装FreeBSD","desc":"FreeBSD 是一款基于 Berkeley Software Distribution 开源的操作系统。可惜 Linode 自带的镜像中是只有 Linux，官方文档中的做法就是自己 dd 安装。\n\n...","title":"在 Linode 上安装 FreeBSD","date":"2021-12-05T20:04:52.000Z","tags":["FreeBSD","Linode"],"categories":"实践","url":"install-freebsd-on-linode"},{"id":"我的开发环境","desc":"最近迁移了自己的小服务器，也顺便把本机的环境重新设置了一下，其中环节还是有点复杂的小细节的。所以打算整理下思路，方便以后再设置同样环境。\n\n对于服务器\n\n目前常用的系统主要是 Ubuntu 和 Fre...","title":"我的开发环境","date":"2021-12-03T23:14:42.000Z","tags":["Linux","Server"],"categories":"实践","url":"my-development-environment","index_img":"/images/我的开发环境/logo.svg"},{"id":"现代前端的Web应用路由-为React打造一个迷你路由器","desc":"路由不仅仅只是网络的代名词，它更像是一种表达路径的概念。与网络中的路由相似，前端中的页面路由也是带领我们前往指定的地方。\n\nrouter\n\n现代前端的 Web 应用路由\n\n时代在变迁，过去，Web 应...","title":"现代前端的 Web 应用路由-为 React 打造一个迷你路由器","date":"2021-08-23T17:28:49.000Z","tags":["JavaScript","React"],"categories":"实践","url":"create-tiny-router-for-react","index_img":"/images/为React造一个迷你路由器/react-router.svg"},{"id":"性能优化-useMemo and useCallback","desc":"性能优化一直是一个值得考虑的问题，但更值得考虑的是什么时候该优化。如果优化不得当，对于向 React 这类成熟的框架来说，即可能会过早优化。反而花了过多的时间来降低其性能。\n\nReact 的 useM...","title":"性能优化-useMemo and useCallback","date":"2021-08-21T16:05:33.000Z","tags":["JavaScript","React"],"categories":"实践","url":"useMemo-and-useCallback"},{"id":"异步JavaScript-Promise信任问题","desc":"继前篇 异步JavaScript-现在与将来 | 🍭Defectink 对异步 JavaScript 有了个大概的了解之后，就要来真正的上手一下 Promise 了。但在了解 Promise 解决了...","title":"异步JavaScript-Promise信任问题","date":"2021-07-16T18:50:04.000Z","tags":"JavaScript","categories":"笔记","url":"asynchronous-javascript-trust-promise"},{"id":"异步JavaScript-现在与将来","desc":"所有重要的程序都需要通过这样或那样的方法来管理持续一段时间的程序行为。这可能是用户输入、从数据库或文件系统中请求数据、通过网络发送数据并等待响应等。在诸如此类的场景中，程序都需要管理这段时间间隔执行重...","title":"异步 JavaScript-现在与将来","date":"2021-07-12T15:21:03.000Z","tags":"JavaScript","categories":"笔记","url":"asynchronous-javascript-now-and-future"},{"id":"JavaScript-语法","desc":"在 JavaScript 中，有很多常见的语法仍然有很多地方容易产生困惑、造成误解。\n\n语句与表达式\n\n语句（statement）和表达式（expression）常常被混为一谈，但他们二者之间有细微的...","title":"JavaScript-语法","date":"2021-07-12T15:20:03.000Z","tags":"JavaScript","categories":"笔记","url":"javascript-syntax"}]},"__N_SSG":true}